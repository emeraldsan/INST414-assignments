import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score, roc_curve, auc
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# Generating a synthetic dataset for illustration purposes
data = {
    'feature_1': [1.2, 2.3, 3.1, 4.5, 5.2, 6.1, 7.0, 8.2, 9.5, 10.1],
    'feature_2': [5.4, 4.5, 3.2, 2.7, 1.8, 6.5, 7.2, 8.3, 9.1, 10.0],
    'feature_3': [0.8, 1.5, 2.0, 3.2, 4.1, 5.0, 6.5, 7.1, 8.0, 9.3],
    'label': [0, 0, 0, 0, 0, 1, 1, 1, 1, 1]
}

df = pd.DataFrame(data)

# Select relevant features and ground-truth labels
features = df[['feature_1', 'feature_2', 'feature_3']]
labels = df['label']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)

# Standardize numerical features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Reduce dimensionality with PCA (if needed)
pca = PCA(n_components=2)
X_train_pca = pca.fit_transform(X_train_scaled)
X_test_pca = pca.transform(X_test_scaled)

# Train a Support Vector Machine (SVM) model
svm_model = SVC(kernel='linear', probability=True, random_state=42)
svm_model.fit(X_train_pca, y_train)

# Make predictions on the test set
y_pred = svm_model.predict(X_test_pca)
y_proba = svm_model.predict_proba(X_test_pca)[:, 1]

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_proba)
conf_matrix = classification_report(y_test, y_pred)

# Print evaluation metrics
print(f"Accuracy: {accuracy:.2f}")
print(f"ROC AUC: {roc_auc:.2f}")
print("Classification Report:")
print(conf_matrix)

# Plot ROC curve
fpr, tpr, _ = roc_curve(y_test, y_proba)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()
